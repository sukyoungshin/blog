import Head from "next/head";
import { 
  ButtonWrapper, 
  CustomSelectMenuWrapper, 
  HeaderWrapper, 
  LogoHeader, 
  MenuItem, 
  SelectMenu, 
  SelectMenuItem, 
  SelectMenuWrapper, 
  TabMenu 
} from "./Header.style";
import { Button, Icon } from '@components/index';
import { 
  BsBrightnessHigh, 
  BsCaretDownFill, 
  BsClock, 
  BsFillMoonFill, 
  BsGraphUp, 
  BsSearch, 
  BsThreeDotsVertical 
} from 'react-icons/bs';
import React, { useState } from "react";
import Link from "next/link";

const Header = () => {
  return (
    <>
      <Head>
        <title>DeVelog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DefaultHeading />
    </>
  );
};

const TabMenuLists = [
  {id: 0, icon: BsGraphUp, text: '트렌딩', active: true},
  {id: 1, icon: BsClock, text: '최신', active: false},
];

const DefaultHeading = () => {
  const [ active, setActive ] = useState(false);
  const handleActive = () => setActive(!active);

  return (
    <HeaderWrapper>
      <LogoHeader>
        <span className="logo">
          <Link href="/">
            DeVelog
          </Link>
        </span>

        <ButtonWrapper>
          <li>
            <ButtonModeSwitch />
          </li>
          <li>
            <ButtonSearch />
          </li>
          <li>
            <Button active>로그인</Button>
          {/* <Button>로그아웃</Button> */}
          </li>
        </ButtonWrapper>
      </LogoHeader>

      <TabMenu>
        <ul>
          {
            TabMenuLists.map((list) => (
              <MenuItem
                key={list.id} 
                active={active === list.active} 
                onClick={handleActive}
              >
                <Button>
                  <Icon size={24}>
                    <list.icon />
                  </Icon>
                  {list.text}
                </Button>
              </MenuItem>
            ))
          }          
          <li>
            <CustomSelectMenu />
          </li>
          <li>
            <OptionButton />
          </li>
        </ul>
      </TabMenu>
    </HeaderWrapper>
  );
}

interface TSelectedMenuLists {
  id: number;
  text: string;
}
const SelectMenuLists: TSelectedMenuLists[] = [
  {id: 0, text: '오늘'},
  {id: 1, text: '이번 주'},
  {id: 2, text: '이번달'},
  {id: 3, text: '올해'},
]

const CustomSelectMenu = () => {
  // 기본 설정된 리스트목록
  const [ selectedId, setSelectedId ] = useState(1);
  const handleSelectedId = (currId: number) => {
    setSelectedId(currId);
    handleSelectMenuToast(); // 토스트팝업 닫기
  };

  // 리스트 팝업
  const [ visible, setVisible ] = useState(false);
  const handleSelectMenuToast = () => setVisible(!visible);

  return (
    <CustomSelectMenuWrapper>
    <SelectMenuWrapper>
      <button 
        type="button"
        onClick={handleSelectMenuToast} 
        className="initial-select"
      >
        {SelectMenuLists[selectedId]?.text}
      </button>
      <SelectMenuButton 
        handleSelectMenuToast={handleSelectMenuToast} 
      />
    </SelectMenuWrapper>
    {
      visible && (
        <SelectMenuToast 
          selectedId={selectedId}
          handleSelectedId={handleSelectedId} 
        />
      )
    }
    </CustomSelectMenuWrapper>
  );
}

const SelectMenuToast = ({...props}: any) => {

  return (
    <SelectMenu>
      {
        SelectMenuLists.map((list) => (
          <SelectMenuItem 
            key={list.id}
            active={list.id === props.selectedId} 
            onClick={() => props.handleSelectedId(list.id)}
          >
            {list.text}
          </SelectMenuItem>  
        ))
      }
    </SelectMenu>  
  );
}

const OptionButton = () => {

  return (
    <Button 
      size={32} 
      onClick={() => console.log('옵션실행')}
    >
      <Icon size={32} active={true}>
        <BsThreeDotsVertical />
      </Icon>
    </Button>
  );
};

const SelectMenuButton = ({...props} : any) => {

  return (
    <Button 
      size={32} 
      active={false} 
      onClick={props.handleSelectMenuToast}
    >
      <Icon size={16} noBorderRadius={true}>
        <BsCaretDownFill />
      </Icon>
    </Button>
  );
}

const ButtonModeSwitch = () => {
  const [ themeMode, setThemeMode ] = useState(false);
  const handleMode = () => {
    // FIXME: theme background color change
    setThemeMode(!themeMode);
  }

  return (
    <Button 
      size={40} 
      onClick={handleMode}
    >
      {
        themeMode
        ? <IconLightMode /> 
        : <IconDarkMode />
      }
    </Button>
  );
}

const IconLightMode = () => {

  return (
    <Icon size={40}>
      <BsFillMoonFill />
    </Icon>
  );
};

const IconDarkMode = () => {

  return (
    <Icon size={40}>
      <BsBrightnessHigh />
    </Icon>
  );
};

const ButtonSearch = () => {

  return (
    <Button size={40}>
      <Icon size={40}>
        <BsSearch />
      </Icon>
    </Button>
  );
};

export default Header;